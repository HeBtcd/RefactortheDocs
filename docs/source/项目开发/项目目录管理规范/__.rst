==========================
项目目录管理规范
==========================

规范目的
========

* **一致性**: 确保所有团队成员都遵循相同的目录结构，减少混乱。
* **可查找性**: 使任何成员都能快速找到所需的资产或文件。
* **可维护性**: 简化项目的构建、打包和版本控制流程。
* **自动化**: 为自动化工具（如构建脚本、资产处理器）提供可预测的文件路径。

根目录结构
==========

项目根目录应包含以下核心文件夹和文件：

.. code-block:: text

    MyGame/
    ├── Assets/             # 存放所有游戏资产的目录
    ├── ProjectSettings/    # 引擎自动生成的项目设置
    ├── Packages/           # 项目依赖的包
    ├── Library/            # 引擎缓存和本地数据（通常不入版本库）
    ├── Logs/               # 日志文件
    ├── Temp/               # 临时文件
    ├── .gitignore          # Git 忽略文件配置
    └── README.md           # 项目说明文档

``Assets`` 目录详解
====================

``Assets`` 目录是项目协作的核心，其内部结构至关重要。

主要资产分类
----------------

.. list-table:: 主要资产分类目录
   :widths: 20 80
   :header-rows: 1

   * - 目录名
     - 描述
   * - ``_Project``
     - **核心目录**，存放项目特有的、需要统一管理的核心资产。
   * - ``Art``
     - 存放所有美术相关的源文件和最终资产。
   * - ``Audio``
     - 存放所有音频相关的资产，包括音效和音乐。
   * - ``Code``
     - 存放所有项目脚本和源码。
   * - ``Design``
     - 存放游戏设计相关的配置资产，如关卡、角色蓝图等。
   * - ``Scenes``
     - 存放所有游戏场景文件。
   * - ``ThirdParty``
     - 存放从外部导入的第三方插件或资产包。

``_Project`` 目录
-----------------

该目录用于存放项目级的管理和配置资产。前置的下划线 ``_`` 确保它在文件浏览器中始终置顶。

* ``_Project/Prefabs/``: 全局通用的核心预制体。
* ``_Project/Settings/``: 项目级的配置文件，如输入设置、渲染管线资产等。
* ``_Project/UI/``: 全局 UI 资产，如通用的 UI 预制体、字体、图集等。

``Art`` 目录
-------------

``Art`` 目录根据资产类型和模块进行细分。

.. code-block:: text

    Assets/Art/
    ├── Characters/         # 角色
    │   ├── Hero/
    │   ├── Enemy/
    │   │   └── Goblin/
    │   │       ├── Animations/
    │   │       ├── Materials/
    │   │       ├── Meshes/
    │   │       ├── Textures/
    │   │       └── Prefabs/
    │   └── NPC/
    ├── Environments/       # 环境
    │   ├── Forest/
    │   └── Dungeon/
    ├── Props/              # 道具
    └── VFX/                # 视觉特效

* **源文件管理**: 建议在每个模块目录（如 ``Goblin``）下创建一个名为 ``SourceFiles`` 或 ``_Source`` 的子目录，用于存放 ``.fbx``, ``.psd``, ``.spp`` 等源文件，并建议将其 **排除在游戏最终构建之外**。

命名约定
========

所有目录和文件名都应使用 **英文**，并遵循 **PascalCase** (大驼峰) 或 **snake_case** (下划线) 命名法，项目内应保持统一。

* **推荐**: ``Assets/Art/Characters/Enemy/Goblin/``
* **不推荐**: ``Assets/美术/角色/敌人/哥布林/``

版本控制
========

* **必须纳入版本库**: ``Assets``, ``ProjectSettings``, ``Packages`` 目录。
* **必须忽略**: ``Library``, ``Temp``, ``Logs``, ``obj``, ``sln``, ``csproj`` 等本地生成的文件。

.. note::

   请确保项目的 ``.gitignore`` 文件配置正确，以避免将不必要的文件提交到版本库中。